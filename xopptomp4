#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import re

# why not a xml parser?
#
# In some previous versions using a parser
# resultes in expressions of type
# <... a = 1 b = 2>
# being changed into
# <... b = 2 a = 1>
# Xournal did not like this (I'm not sure if this is the case still).
# Instead the script uses string manipulation.

# sauce : https://stackoverflow.com/questions/9808714/control-the-number-of-subprocesses-using-to-call-external-commands-in-python
import concurrent.futures
import multiprocessing

# horizontal resolution of images
HRES = 1920
# frame rate
FRATE = 32
# frames to pause for short strokes
FSHORT = 4
# frames to pause for images
FIMAGES = 32
# number of parralel processes
NPARALLEL = 4
# frames to pause on end of stroke
ENDPAUSE = 64
# frames to pause on end of layer
LAYERPAUSE = 32
# skip stroke coordinates
SKIPSTROKE = 8
# save frames in SVG format to save space
FRAMEFORMAT = False
# wait times
WAITTIMES = {}

def getUnzipped(path):
    return subprocess.run(["zcat" , path] , capture_output = True).stdout.decode("utf-8")

def getPagesRange(unzipped):
    return [x.span() for x in re.finditer('<page.*?</page>' , unzipped , flags = re.DOTALL)]

def getLayersRange(unzipped):
    return [x.span() for x in re.finditer('<layer>.*?</layer>' , unzipped , flags = re.DOTALL)]

def getStrokesRange(unzipped):
    return [x.span() for x in re.finditer('<stroke.*?</stroke>|<image.*?</image>' , unzipped , flags = re.DOTALL)]

def filterInRange(r , l):
    return [x for x in l if x[0] >= r[0] and x[1] <= r[1]]

def getPageIterator(unzipped):
    pages = getPagesRange(unzipped)
    return range(len(pages))

def getLayerIterator(unzipped , p):
    pages = getPagesRange(unzipped)
    layers = getLayersRange(unzipped)
    return range(len(filterInRange(pages[p] , layers)))

def getStrokeIterator(unzipped , p , l):
    pages = getPagesRange(unzipped)
    layers = getLayersRange(unzipped)
    strokes = getStrokesRange(unzipped)
    return range(len(filterInRange(filterInRange(pages[p] , layers)[l] , strokes)))

def splitStrokePath(stroke):
    if(not ("</image>" in stroke)):
        width = (re.search('width="(.*?)"', stroke).group(1)).split()
        points = (re.search('>(.*?)<', stroke).group(1)).split()
        result = []
        if len(width) < 2:
            return [stroke for _ in range(FSHORT)]
        else:
            rng = list(range(len(width) - 1 , 1 , -SKIPSTROKE))
            rng.reverse()
            for i in rng:
                after = re.sub('width="(.*?)"', 'width="'+" ".join(width[: i]) + '"' , stroke)
                after = re.sub('>(.*?)<', '>' + " ".join(points[: 2 * i]) + '<' , after)
                result.append(after)
            return result
    else:
        return [stroke for _ in range(FIMAGES)]

#def getSingleStroke(unzipped , p , l , s):
#
#    pages = getPagesRange(unzipped)
#    layers = getLayersRange(unzipped)
#    strokes = getStrokesRange(unzipped)
#
#    preambuleEnd = pages[0][0]
#    postambuleStart = pages[-1][1]
#
#    layersInPage = filterInRange(pages[p] , layers)
#    pagePreambuleStart , pagePreambuleEnd = pages[p][0] , layersInPage[0][0]
#    pagePostambuleStart , pagePostambuleEnd = layersInPage[-1][1] , pages[p][1]
#    
#    strokesInLayer = filterInRange(layersInPage[l] , strokes)
#    layerPreambuleStart , layerPreambuleEnd = layersInPage[l][0] , strokesInLayer[0][0] 
#    layerPostambuleStart , layerPostambuleEnd = strokesInLayer[-1][1] , layersInPage[l][1]
#
#    strokeBeforeStart = strokesInLayer[s - 1][1] if s - 1 >=0 else strokesInLayer[s][0]
#    strokeBeforeEnd = strokesInLayer[s][0]
#    
#    strokeAfterStart = strokesInLayer[s][1]
#    strokeAfterEnd = strokesInLayer[s + 1][0] if s + 1 < len(strokesInLayer) else strokesInLayer[s][1]
#    
#    startStroke , endStroke = filterInRange(filterInRange(pages[p] , layers)[l] , strokes)[s]
#
#    preambule = \
#                unzipped[: preambuleEnd] + \
#                unzipped[pagePreambuleStart : pagePreambuleEnd] + \
#                unzipped[layerPreambuleStart : layerPreambuleEnd] + \
#                unzipped[strokeBeforeStart : strokeBeforeEnd]
#
#    postambule = \
#                unzipped[strokeAfterStart : strokeAfterEnd] + \
#                unzipped[layerPostambuleStart : layerPostambuleEnd] + \
#                unzipped[pagePostambuleStart : pagePostambuleEnd] + \
#                unzipped[postambuleStart :] 
#
#    single = preambule + unzipped[startStroke : endStroke] + postambule
#
#    return [single]

def getAnimStroke(unzipped , p , l , s , startTime = None , endTime = None):

    pages = getPagesRange(unzipped)
    layers = getLayersRange(unzipped)
    strokes = getStrokesRange(unzipped)

    preambuleEnd = pages[0][0]
    postambuleStart = pages[-1][1]

    layersInPage = filterInRange(pages[p] , layers)
    pagePostambuleStart , pagePostambuleEnd = layersInPage[-1][1] , pages[p][1]
    
    strokesInLayer = filterInRange(layersInPage[l] , strokes)
    layerPostambuleStart , layerPostambuleEnd = strokesInLayer[-1][1] , layersInPage[l][1]

    end_of_page = (l == len(layersInPage) - 1) and (s == len(strokesInLayer) - 1)
    end_of_layer = (s == len(strokesInLayer) - 1)

    strokeAfterStart = strokesInLayer[s][1]
    strokeAfterEnd = strokesInLayer[s + 1][0] if s + 1 < len(strokesInLayer) else strokesInLayer[s][1]
    
    startStroke , endStroke = filterInRange(filterInRange(pages[p] , layers)[l] , strokes)[s]

    prePage = pages[0][0]
    postPage = pages[p - 1][1] if p - 1 >= 0 else pages[0][0]

    firstLayer = ""
    if len(layersInPage) > 1:
        firstLayer = unzipped[layersInPage[0][0] : layersInPage[0][1]]

    if(l != 0):
        preambule = unzipped[: prePage] + unzipped[postPage : layersInPage[0][0]] + firstLayer + unzipped[layersInPage[l][0] : strokesInLayer[s][0]]
    else:
        preambule = unzipped[: prePage] + unzipped[postPage : layersInPage[0][0]] + unzipped[layersInPage[l][0] : strokesInLayer[s][0]]

    postambule = \
                unzipped[strokeAfterStart : strokeAfterEnd] + \
                unzipped[layerPostambuleStart : layerPostambuleEnd] + \
                unzipped[pagePostambuleStart : pagePostambuleEnd] + \
                unzipped[postambuleStart :] 

    splitS = splitStrokePath(unzipped[startStroke : endStroke])

    result = list(map(lambda x : preambule + x + postambule , splitS))

    additional = []

    if((len(WAITTIMES) == 0) or (startTime is None) or (endTime is None)):
        if(end_of_page):
            additional = [result[-1] for _ in range(ENDPAUSE)]
        elif(end_of_layer):
            additional = [result[-1] for _ in range(LAYERPAUSE)]
    else:
        if(end_of_layer):
            extraTime = (endTime - startTime) - (float(len(result)) / float(FRATE))
            if(extraTime > 0):
                extraFrames = int(extraTime * float(FRATE))
                additional = [result[-1] for _ in range(extraFrames)]
            else:
                sys.stderr.write("\n\nWARNING Too little time for page. page , layer , stroke : " + str(p) + " " + str(l) + " " + str(s) + "\n\n")

    return result + additional

def getStrokeAndBefore(unzipped , p , l , s , startTime = None , endTime = None):

    pages = getPagesRange(unzipped)
    layers = getLayersRange(unzipped)
    strokes = getStrokesRange(unzipped)

    preambuleEnd = pages[0][0]
    postambuleStart = pages[-1][1]

    layersInPage = filterInRange(pages[p] , layers)
    pagePostambuleStart , pagePostambuleEnd = layersInPage[-1][1] , pages[p][1]
    
    strokesInLayer = filterInRange(layersInPage[l] , strokes)
    layerPostambuleStart , layerPostambuleEnd = strokesInLayer[-1][1] , layersInPage[l][1]

    end_of_page = (l == len(layersInPage) - 1) and (s == len(strokesInLayer) - 1)
    end_of_layer = (s == len(strokesInLayer) - 1)

    strokeAfterStart = strokesInLayer[s][1]
    strokeAfterEnd = strokesInLayer[s + 1][0] if s + 1 < len(strokesInLayer) else strokesInLayer[s][1]
    
    startStroke , endStroke = filterInRange(filterInRange(pages[p] , layers)[l] , strokes)[s]

    prePage = pages[0][0]
    postPage = pages[p - 1][1] if p - 1 >= 0 else pages[0][0]
    
    preambule = unzipped[: prePage] + unzipped[postPage : startStroke]

    postambule = \
                unzipped[strokeAfterStart : strokeAfterEnd] + \
                unzipped[layerPostambuleStart : layerPostambuleEnd] + \
                unzipped[pagePostambuleStart : pagePostambuleEnd] + \
                unzipped[postambuleStart :] 

    splitS = splitStrokePath(unzipped[startStroke : endStroke])

    result = list(map(lambda x : preambule + x + postambule , splitS))

    additional = []
    
    if((len(WAITTIMES) == 0) or (startTime is None) or (endTime is None)):
        if(end_of_page):
            additional = [result[-1] for _ in range(ENDPAUSE)]
        elif(end_of_layer):
            additional = [result[-1] for _ in range(LAYERPAUSE)]
    else:
        if(end_of_layer):
            extraTime = (endTime - startTime) - (float(len(result)) / float(FRATE))
            if(extraTime > 0):
                extraFrames = int(extraTime * float(FRATE))
                additional = [result[-1] for _ in range(extraFrames)]
            else:
                sys.stderr.write("\n\nWARNING Too little time for page. page , layer , stroke : " + str(p) + " " + str(l) + " " + str(s) + "\n\n")

    return result + additional

def worker(arg):
   
    ip , l , pg , outputpath = arg

    out_w , err_w = [] , []

    nme = os.path.join(outputpath , str(ip).zfill(10))

    with open(nme , "w") as f:
        f.write(pg)

    out_w.append("- frame : " + str(ip))
    err_w.append("- frame : " + str(ip))
    r = subprocess.run(["cp" , nme , nme + ".unzipped"] , capture_output = True)
    out_w.append(r.stdout.decode('utf-8'))
    err_w.append(r.stderr.decode('utf-8'))
    r = subprocess.run(["gzip" , nme] , capture_output = True)
    out_w.append(r.stdout.decode('utf-8'))
    err_w.append(r.stderr.decode('utf-8'))
    r = subprocess.run(["mv" , nme + ".gz" , nme + ".xopp"] , capture_output = True)
    out_w.append(r.stdout.decode('utf-8'))
    err_w.append(r.stderr.decode('utf-8'))
    if(not FRAMEFORMAT):
        r = subprocess.run(["xournalpp" , nme + ".xopp" , "--create-img=" + os.path.join(nme) + ".png" , "--export-png-width=" + str(HRES)] , capture_output = True)
    else:
        r = subprocess.run(["xournalpp" , nme + ".xopp" , "--create-img=" + os.path.join(nme) + ".svg"] , capture_output = True)
    out_w.append(r.stdout.decode('utf-8'))
    err_w.append(r.stderr.decode('utf-8'))

    return ("\n".join(out_w) , "\n".join(err_w))

def splitStrokes(inputpath , outputpath , splitter = getStrokeAndBefore):

    unzipped = getUnzipped(inputpath)

    pages = getPagesRange(unzipped)
    layers = getLayersRange(unzipped)
    strokes = getStrokesRange(unzipped)

    pgs = []

    pageNumber = 1
    for ip in getPageIterator(unzipped):
        for il in getLayerIterator(unzipped , ip):
            for si in getStrokeIterator(unzipped , ip , il):
                sys.stdout.write("\r")
                sys.stdout.write("splitting ... page = " + str(ip) + " , layer = " + str(il) + " , stroke = " + str(si) + "           ")
                sT = float(len(pgs)) / float(FRATE)
                eT = None
                if(pageNumber in WAITTIMES):
                    eT = WAITTIMES[pageNumber]
                pgs += splitter(unzipped , ip , il , si , startTime = sT , endTime = eT)  
            pageNumber += 1

    if not os.path.exists(outputpath):
        os.mkdir(outputpath)

    out , err = [] , []

    ip = 0
    while(ip < len(pgs)):
        worker_args = [(ip , len(pgs) , pgs[ip] , outputpath) for ip in range(ip , ip + NPARALLEL if ip + NPARALLEL < len(pgs) else len(pgs))] 

        with multiprocessing.Pool() as pool:
            for result_out , result_err in pool.map(worker , worker_args):
                out.append(result_out)
                err.append(result_err)

        sys.stdout.write("\r")
        sys.stdout.write("calculating frames ... frame = " + str(ip) + " , total = " + str(len(pgs)) + "              ")

        ip += NPARALLEL

    with open(os.path.join(outputpath , "out") , 'a') as f:
        f.write("#\n")
        f.write("\n".join(out))

    with open(os.path.join(outputpath , "err") , 'a') as f:
        f.write("#\n")
        f.write("\n".join(err))

    sys.stdout.write("\n")

    if(not FRAMEFORMAT):
        subprocess.run(["ffmpeg" , "-r" , str(FRATE) , "-i" , os.path.join(outputpath , "%10d.png") , "-pix_fmt" , "yuv420p" , outputpath + ".mp4"])
    else:
        subprocess.run(["ffmpeg" , "-f" , "image2" , "-width" , str(HRES) , "-r" , str(FRATE) , "-i" , os.path.join(outputpath , "%10d.svg") , "-pix_fmt" , "yuv420p" , outputpath + ".mp4"])

if(__name__ == "__main__"):
    parser = argparse.ArgumentParser(description = "Turn xojp file into a mpeg.")
    parser.add_argument("input" , help = "Input file.")
    parser.add_argument("output" , help = "Output directory.")
    parser.add_argument("--hres" , "-r" , help = "Horizontal resulution, by default 1920.")
    parser.add_argument("--frate" , "-f" , help = "Frame rate, by default 32.")
    parser.add_argument("--pause" , "-p" , help = "Frames to pause on short strokes. By default 4.")
    parser.add_argument("--images" , "-i" , help = "Frames to pause on images. By default 32.")
    parser.add_argument("--fchange" , "-c" , action = "store_true" , help = "Change framerate, does not calculate frames.")
    parser.add_argument("--nthreads" , "-t" , help = "Number of threads to run in parallel. By default 4.")
    parser.add_argument("--endpause" , "-e" , help = "Frames to pause on end of page. By default 64.")
    parser.add_argument("--layerpause" , "-l" , help = "Frames to pause on end of layer. By default 32.")
    parser.add_argument("--skipevery" , "-s" , help = "Take one stroke coordinate every copuple of coordinates for frames. By default 8.")
    parser.add_argument("--animate" , "-a" , action = "store_true" , help = "Use different method for splitting presentation. Layers are not placed on top of one another but animated. One layer at a time, the first layer appears on all frames.")
    parser.add_argument("--svg" , "-v" , action = "store_true" , help = "Save frames in svg format instead of png.")
    parser.add_argument("--wait" , "-w" , help = """Path to file with wait times for pages. 
    Each line has the following format: <page number starting from 1> <hours>:<minutes>:<seconds>:<hundredths of a second>. 
    Page numbering is consistent with xournal's --export-layers-progressively.
    Lines containig # will be ignored.""")
    args = parser.parse_args()

    if(args.hres is not None):
        HRES = int(args.hres)

    if(args.frate is not None):
        FRATE = int(args.frate)

    if(args.pause is not None):
        FSHORT = int(args.pause)

    if(args.images is not None):
        FIMAGES = int(args.images)

    if(args.nthreads is not None):
        NPARALLEL = int(args.nthreads)

    if(args.endpause is not None):
        ENDPAUSE = int(args.endpause) 
    
    if(args.layerpause is not None):
        LAYERPAUSE = int(args.layerpause) 

    if(args.skipevery is not None):
        SKIPSTROKE = int(args.skipevery) 

    if(args.svg):
        FRAMEFORMAT = True

    if(args.wait is not None):
        with open(args.wait , "r") as f:
            for line in f.readlines():
                if("#" not in line):
                    pageW , restW = line.split()
                    hhW , mmW , ssW , ffW = restW.split(":")
                    WAITTIMES.update({int(pageW) : float(hhW) * 3600.0 + float(mmW) * 60.0 + float(ssW) + float(ffW) * 0.01})
    
    if not subprocess.run(["xournalpp" , "--version"] , capture_output = True).returncode == 0:
        print("xournalpp not available, exiting.")
        sys.exit(1)
    
    if not subprocess.run(["zcat" , "--version"] , capture_output = True).returncode == 0:
        print("zcat not available, exiting.")
        sys.exit(1)

    if not subprocess.run(["gzip" , "--version"] , capture_output = True).returncode == 0:
        print("gzip not available, exiting.")
        sys.exit(1)
 
    if not subprocess.run(["ffmpeg" , "-version"] , capture_output = True).returncode == 0:
        print("ffmpeg not available, exiting.")
        sys.exit(1)   

    if(args.fchange):
        if(not FRAMEFORMAT):
            subprocess.run(["ffmpeg" , "-r" , str(FRATE) , "-i" , os.path.join(args.output , "%10d.png") , "-pix_fmt" , "yuv420p" , args.output + ".mp4"])
        else:
            subprocess.run(["ffmpeg" , "-f" , "image2" , "-width" , str(HRES) , "-r" , str(FRATE) , "-i" , os.path.join(outputpath , "%10d.svg") , "-pix_fmt" , "yuv420p" , outputpath + ".mp4"])
    else:
    
        if not os.path.exists(args.output):
            os.makedirs(args.output)
        
        unzipped = subprocess.run(["zcat" , args.input] , capture_output = True)

        if not unzipped.returncode == 0:
            print("problem unpacking " + args.input + ", exiting.")
            sys.exit(1)
       
        if(not args.animate):
            splitStrokes(args.input, args.output) 
        else:
            splitStrokes(args.input, args.output , splitter = getAnimStroke) 

